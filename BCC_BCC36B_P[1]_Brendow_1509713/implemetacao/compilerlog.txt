    lex.py: 924:lex: tokens   = ('MAIS', 'MENOS', 'MULTIPLICACAO', 'DIVISAO', 'DOIS_PONTOS', 'VIRGULA', 'MENOR', 'MAIOR', 'IGUAL', 'DIFERENTE', 'MENOR_IGUAL', 'MAIOR_IGUAL', 'E_LOGICO', 'OU_LOGICO', 'NEGACAO', 'ABRE_PARENTESE', 'FECHA_PARENTESE', 'ABRE_COLCHETE', 'FECHA_COLCHETE', 'ABRE_CHAVE', 'FECHA_CHAVE', 'SE', 'ENTAO', 'SENAO', 'FIM', 'REPITA', 'ATE', 'ATRIBUICAO', 'LEIA', 'ESCREVA', 'RETORNA', 'INTEIRO', 'FLUTUANTE', 'NUM_INTEIRO', 'NUM_PONTO_FLUTUANTE', 'NUM_NOTACAO_CIENTIFICA', 'ID', 'FUNCAO')
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_ID -> '[a-zA-Z][a-zA-Z_0-9à-ú]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_NUM_PONTO_FLUTUANTE -> '\d+\.\d*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_NUM_INTEIRO -> '\d+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_COMMENT -> '\{[^\{]*\}' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ESCREVA -> 'escreva' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RETORNA -> 'retorna' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_REPITA -> 'repita' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FUNCAO -> 'funcao' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ENTAO -> 'entao' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SENAO -> 'senao' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_OU_LOGICO -> '\|\|' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LEIA -> 'leia' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FIM -> 'fim' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ATE -> 'ate' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MAIS -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MENOS -> '\-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MULTIPLICACAO -> '\*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIVISAO -> '\/' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ATRIBUICAO -> ':=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MENOR_IGUAL -> '<=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MAIOR_IGUAL -> '>=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_IGUAL -> '==' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIFERENTE -> '!=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_E_LOGICO -> '&&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NEGACAO -> '\!' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ABRE_PARENTESE -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FECHA_PARENTESE -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ABRE_COLCHETE -> '\[' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FECHA_COLCHETE -> '\]' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SE -> 'se' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DOIS_PONTOS -> ':' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_VIRGULA -> ',' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MENOR -> '<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MAIOR -> '>' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_ID>[a-zA-Z][a-zA-Z_0-9à-ú]*)|(?P<t_NUM_PONTO_FLUTUANTE>\d+\.\d*)|(?P<t_NUM_INTEIRO>\d+)|(?P<t_newline>\n+)|(?P<t_COMMENT>\{[^\{]*\})|(?P<t_ESCREVA>escreva)|(?P<t_RETORNA>retorna)|(?P<t_REPITA>repita)|(?P<t_FUNCAO>funcao)|(?P<t_ENTAO>entao)|(?P<t_SENAO>senao)|(?P<t_OU_LOGICO>\|\|)|(?P<t_LEIA>leia)|(?P<t_FIM>fim)|(?P<t_ATE>ate)|(?P<t_MAIS>\+)|(?P<t_MENOS>\-)|(?P<t_MULTIPLICACAO>\*)|(?P<t_DIVISAO>\/)|(?P<t_ATRIBUICAO>:=)|(?P<t_MENOR_IGUAL><=)|(?P<t_MAIOR_IGUAL>>=)|(?P<t_IGUAL>==)|(?P<t_DIFERENTE>!=)|(?P<t_E_LOGICO>&&)|(?P<t_NEGACAO>\!)|(?P<t_ABRE_PARENTESE>\()|(?P<t_FECHA_PARENTESE>\))|(?P<t_ABRE_COLCHETE>\[)|(?P<t_FECHA_COLCHETE>\])|(?P<t_SE>se)|(?P<t_DOIS_PONTOS>:)|(?P<t_VIRGULA>,)|(?P<t_MENOR><)|(?P<t_MAIOR>>)'
